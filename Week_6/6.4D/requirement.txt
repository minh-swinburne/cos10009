You must complete the code so that it works as follows:

1.    The code in the initialize() procedure of the Gosu window should be completed to set up cells that are connected to each other with variables joining each cell to its neighbours (using references).

2.    The user should be able to left click on cells on the screen to create mazes (and later in the Maze Search task we will use recursion to find a path through the maze).

3.    Each cell clicked on should turn yellow.

4.    Once this is working (or perhaps before) add code to print out each cell and indicate whether the reference to the neighbour on each side is nil or not, as per the following:



In this case there is no neighbour to the north or the west.

(NB: whether the east or the west neighbour is nil will depend on your perspective â€“ i.e is your perspective looking into the screen, or out of the screen)

Your submitted screenshot should look something like the following:



Once you have the program working as required submit a screenshot to the workspace.

Sobkowicz, M 2015 Learn game programming with Ruby : bring your ideas to life with Gosu, The Pragmatic Bookshelf (See chapter 7 for help the grid aspect of the Maze Task)

 Gosu Ruby Documentation

 Gosu site

 Gosu game video tutorial